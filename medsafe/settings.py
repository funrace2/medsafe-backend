"""
Django settings for medsafe project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(BASE_DIR / '.env')

# 1) django-environ 초기화
env = environ.Env(DEBUG=(bool, False))
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-svn^vosbm8al_g8_*+5zk8u*iw99xk7m*g*v7igv5o12n&j2km'
OPEN_API_KEY = env('OPEN_API_KEY')
GEN_API_KEY = env('GEMINI_API_KEY')
FIREBASE_CREDENTIALS_PATH = os.environ.get("FIREBASE_CREDENTIALS_PATH")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    # '192.168.0.12',          # <-- PC에서 ifconfig/ipconfig로 확인한 로컬 IP
    '.ngrok-free.app',
    'medsafe-api-devvjccp3q-du.a.run.app',
]
CSRF_TRUSTED_ORIGINS = [
    "https://medsafe-api-devvjccp3q-du.a.run.app",  # 반드시 https:// 를 포함한 풀 URL
    # ...다른 프론트 도메인들
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'prescriptions',
    'core.apps.CoreConfig',  # core 앱을 추가
    'chat'
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        # 세션 기반 인증
        'rest_framework.authentication.SessionAuthentication',
        # 필요하다면 Basic Auth도 함께
        'rest_framework.authentication.BasicAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 로그인이 필요한 API만 허용
        'rest_framework.permissions.IsAuthenticated',
        # 모든 사용자에게 허용
        # 'rest_framework.permissions.AllowAny',
    ],
}

# Upstash Redis URL (environment variable)
CELERY_BROKER_URL       = os.environ["UPSTASH_REDIS_URL"]
CELERY_RESULT_BACKEND    = None
# Upstash 는 TLS 연결을 권장하므로, 필요하면 SSL 옵션도 켜 줍니다.
CELERY_BROKER_USE_SSL    = {
    'ssl_cert_reqs': False  # 보안 인증서 확인이 필요하면 True 로 조정
}
CELERY_TASK_IGNORE_RESULT = True

# 직렬화/역직렬화 포맷
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_ACKS_LATE    = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# 타임존 설정
CELERY_TIMEZONE = 'Asia/Seoul'
CELERY_ENABLE_UTC = True

# (선택) 태스크 결과 보관 만료 시간 (초)
CELERY_RESULT_EXPIRES = 3600


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medsafe.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medsafe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        #'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': BASE_DIR / 'db.sqlite3',
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DB_NAME'),
            'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'),
            'HOST': env('DB_HOST'),
            'PORT': env('DB_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
